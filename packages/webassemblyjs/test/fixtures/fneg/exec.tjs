it("should negate positive input", () => {
  return WebAssembly.instantiate(wasmmodule).then(m => {
    const res = m.instance.exports.neg(0.5);

    assert.typeOf(res, "number");
    assert.equal(res, -0.5);
  });
});

it("should negate negative input", () => {
  return WebAssembly.instantiate(wasmmodule).then(m => {
    const res = m.instance.exports.neg(-12341234);

    assert.typeOf(res, "number");
    assert.equal(res, 12341234);
  });
});

it("should negate negative zero", () => {
  return WebAssembly.instantiate(wasmmodule).then(m => {
    const res = m.instance.exports.neg(-0);

    assert.typeOf(res, "number");
    assert.equal(res, 0);
  });
});

it("should negate NaN", () => {
  return WebAssembly.instantiate(wasmmodule).then(m => {
    const res = m.instance.exports.neg(NaN);

    assert.typeOf(res, "number");
    assert.isTrue(Object.is(res, NaN));
  });
});

it("should negate Infinity", () => {
  return WebAssembly.instantiate(wasmmodule).then(m => {
    const res = m.instance.exports.neg(Infinity);

    assert.typeOf(res, "number");
    assert.equal(res, -Infinity);
  });
});
